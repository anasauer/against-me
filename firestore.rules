/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user data and allows public read access to friend requests while limiting write access.
 * @data_structure
 *   - /users/{userId}: Stores public user profile information.
 *   - /users/{userId}/challenges/{challengeId}: Stores challenges specific to each user.
 *   - /friendRequests/{requestId}: Stores friend requests between users.
 * @key_security_decisions
 *   - Users can only read and write their own profile data and challenges.
 *   - Friend requests are publicly readable but only writable by authenticated users with valid data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read) Authenticated user can get their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @deny (update) Non-authenticated user cannot update any profile.
     * @deny (delete) Non-authenticated user cannot delete any profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.name is string;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.name == request.resource.data.name;
      allow delete: if false;
    }

    /**
     * @description Controls access to challenges for a specific user.
     * @path /users/{userId}/challenges/{challengeId}
     * @allow (read) Authenticated user can get their own challenges.
     * @allow (create) Authenticated user can create challenges under their profile.
     * @deny (update) Non-authenticated user cannot update any challenge.
     * @deny (delete) Non-authenticated user cannot delete any challenge.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/challenges/{challengeId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to friend requests.
     * @path /friendRequests/{requestId}
     * @allow (read) Any user can read friend requests.
     * @allow (create) Authenticated users can create friend requests.
     * @deny (update) Non-authenticated user cannot update any friend request.
     * @deny (delete) Non-authenticated user cannot delete any friend request.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /friendRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isValidFriendRequest(request.resource.data);
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidFriendRequest(friendRequest) {
        return friendRequest.senderId is string
        && friendRequest.senderName is string
        && friendRequest.senderAvatar is string
        && friendRequest.receiverId is string
        && friendRequest.status in ["pending", "accepted", "declined"]
        && friendRequest.createdAt is string;
    }
  }
}