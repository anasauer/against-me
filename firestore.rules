/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a basic security model where only authenticated users can access the database.
 * It prioritizes rapid development and iteration by focusing on authentication and ownership,
 * while relaxing data validation constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /users/{userId}/challenges/{challengeId}: Stores the challenges for a specific user.
 * - /friendRequests/{requestId}: Stores all friend requests within the application.
 *
 * Key Security Decisions:
 * - Only authenticated users can read or write data.
 * - Data validation is minimal to allow for flexible data shapes during prototyping.
 * - The rules do not implement any role-based access control or complex authorization logic.
 *
 * Denormalization for Authorization:
 *  - Friend requests are stored in a top-level collection to avoid complex queries. The `senderId` and `receiverId` fields are used for authorization.
 *  - Challenges are stored in a subcollection of the user document to ensure ownership. The `userId` field within the challenge is redundant but simplifies rules.
 *
 * Structural Segregation:
 *  - User profiles are stored in a dedicated collection to separate public user data from private information (if any).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only authenticated users to read and write user profile information.
     * @path /users/{userId}
     * @allow (get, list) if request.auth != null
     * @allow (create, update, delete) if request.auth != null
     * @deny (create, update, delete) if request.auth == null
     * @principle Authenticated users only
     */
    match /users/{userId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Allows only authenticated users to read and write challenges for a specific user.
     * @path /users/{userId}/challenges/{challengeId}
     * @allow (get, list) if request.auth != null
     * @allow (create, update, delete) if request.auth != null
     * @deny (create, update, delete) if request.auth == null
     * @principle Authenticated users only
     */
    match /users/{userId}/challenges/{challengeId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Allows only authenticated users to read and write friend requests.
     * @path /friendRequests/{requestId}
     * @allow (get, list) if request.auth != null
     * @allow (create, update, delete) if request.auth != null
     * @deny (create, update, delete) if request.auth == null
     * @principle Authenticated users only
     */
    match /friendRequests/{requestId} {
      allow read, write: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}